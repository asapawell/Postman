{
	"info": {
		"_postman_id": "bd216333-b609-4b7d-b450-0d80defa068e",
		"name": "Homework2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//установка токена, он берется из тела ответа и вставлем значение в окружение",
							"let jData = JSON.parse(responseBody);",
							"pm.environment.set(\"token\",jData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "asap",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1234",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2.проверка структуры JSON",
							"pm.test(\"The Response has all properties\", function () ",
							"{",
							"    let jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.be.an('Object');",
							"    //чтобы сравнить ключ в ответе с изначальным ответом, нужно провалиться в person.value, т.к person находится выше",
							"    pm.expect(jsonData.person.u_age).to.eql(22).to.be.a(\"number\");",
							"    //в ответе ключ u_name включает в себя массив из 3 элементов, обращаемся к каждому по индексу",
							"    pm.expect(jsonData.person.u_name).to.eql([null,200,22]).to.be.an('array');",
							"    pm.expect(jsonData.person.u_name[0]).to.eql(null).to.be.a('null');",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(200).to.be.a('number');",
							"    pm.expect(jsonData.person.u_name[2]).to.eql(22).to.be.a('number');",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(800).to.be.a('number');",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(580).to.be.a('number');",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(400).to.be.a('number');",
							"    pm.expect(jsonData.start_qa_salary).to.eql(200).to.be.a('number');",
							"    ",
							"});",
							"",
							"//3. Проверить перемножение коэффициентов",
							"pm.test(\"Multiplication result\", function()",
							"{",
							"let jsonData = pm.response.json();",
							"//умножаем коэффициент не из запроса, а из ответа - start_qa_salary",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(jsonData.start_qa_salary * 2);",
							"pm.expect(jsonData.qa_salary_after_12_months).to.eql(jsonData.start_qa_salary * 2.9);",
							"pm.expect(jsonData.person.u_salary_1_5_year).to.eql(jsonData.start_qa_salary * 4);",
							"})",
							"",
							"//4. Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://116.203.27.46:5002 (http://188.130.138.105:5001/new_data)/get_test_user",
							"pm.test(\"New data\", function()",
							"{",
							"let jsonData = pm.response.json();",
							"pm.environment.set('salary',jsonData.person.u_salary_1_5_year);",
							"})",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\":22,\n    \"salary\":200,\n    \"name\":\"Pavel\",\n    \"auth_token\":\"{{token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "New_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус 200",
							"pm.test(\"Status code is 200\",function()",
							"{",
							"pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Структура json в ответе",
							"pm.test(\"The Response has all properties\",function()",
							"{",
							"let jsonData = pm.response.json();",
							"pm.expect(jsonData.age).to.be.a('number');",
							"pm.expect(jsonData.name).to.be.a('string');",
							"pm.expect(jsonData.salary).to.be.an('array');",
							"pm.expect(jsonData.salary[0]).to.be.a('number');",
							"pm.expect(jsonData.salary[1]).to.be.a('string');",
							"pm.expect(jsonData.salary[2]).to.be.a('string');",
							"});",
							"",
							"//4.Проверка результата перемножения",
							"pm.test(\"Multiplication result\",function()",
							"{",
							"let jsonData = pm.response.json();",
							"pm.expect(parseInt(jsonData.salary[1])).to.eql(parseInt(jsonData.salary[0] * 2));",
							"pm.expect(parseInt(jsonData.salary[2])).to.eql(parseInt(jsonData.salary[0] * 3));",
							"});",
							"",
							"//5. Проверить, что 2-й элемент массива salary больше 1-го и 0-го",
							"pm.test(\"[2] > [1] и [2] > [0]\", function()",
							"{",
							"let jsonData = pm.response.json();",
							"pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(parseInt(jsonData.salary[1]));",
							"pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(parseInt(jsonData.salary[0]));",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "300",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2) Проверка структуры json в ответе",
							"pm.test('The Response has all properties',function()",
							"{",
							"let jsonData = pm.response.json();",
							"pm.expect(jsonData.age).to.be.a('number');",
							"pm.expect(jsonData.daily_food).to.be.a('number');",
							"pm.expect(jsonData.daily_sleep).to.be.a('number');",
							"pm.expect(jsonData.name).to.be.a('string');",
							"})",
							"",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"pm.test('Multiplication result',function()",
							"{",
							"let jsonData = pm.response.json();",
							"let req = request.data;",
							"pm.expect(jsonData.daily_food).to.eql(req.weight * 0.012);",
							"pm.expect(jsonData.daily_sleep).to.eql(req.weight * 2.5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "69",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200",
							"pm.test('Status code is 200',function()",
							"{",
							"pm.response.to.have.status(200);",
							"})",
							"",
							"//2) Проверка структуры json в ответе.",
							"pm.test('The Response has all properties',function()",
							"{",
							"let jsonData = pm.response.json();",
							"pm.expect(jsonData.name).to.be.a('string');",
							"// age не int в ответе",
							"pm.expect(jsonData.age).to.be.a('string');",
							"pm.expect(jsonData.salary).to.be.a('number');",
							"pm.expect(jsonData.family).to.be.an('object');",
							"pm.expect(jsonData.family.children).to.be.a('array');",
							"pm.expect(jsonData.family.children[0]).to.be.a('array');",
							"pm.expect(jsonData.family.children[0][0]).to.be.a('string');",
							"pm.expect(jsonData.family.children[0][1]).to.be.a('number');",
							"pm.expect(jsonData.family.children[1]).to.be.a('array');",
							"pm.expect(jsonData.family.children[1][0]).to.be.a('string');",
							"pm.expect(jsonData.family.children[1][1]).to.be.a('number');",
							"});",
							"",
							"//3) Проверить что занчение поля name = значению переменной name из окружения",
							"pm.test('name = enviroment name',function()",
							"{",
							"let jsonData = pm.response.json();",
							"pm.expect(jsonData.name).to.eql(pm.variables.get('name'));",
							"});",
							"",
							"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age",
							"pm.test('age request = age response',function()",
							"{",
							"//jsonData - для этой переменной мы считываем данные в json",
							"let jsonData = pm.response.json();",
							"//req - для этой переменной мы считываем наш request",
							"let req = request.data;",
							"//соответственно первое это ключи из request, второе - из response",
							"pm.expect(req.age).to.eql(jsonData.age);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Можете взять любой объект из присланного списка, используйте js random. В объекте возьмите Cur_ID и передать через окружение в следующий запрос.",
							"",
							"let jsonData = pm.response.json();",
							"let randomObject = jsonData[Math.floor(Math.random() * jsonData.length)];",
							"console.log(randomObject);",
							"pm.environment.set('Cur_ID',randomObject.Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "Curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.статус код 200",
							"pm.test(\"Status code is 200\",function()",
							"{",
							"pm.response.to.have.status(200);",
							"})",
							"",
							"//2. Проверка структуры json в ответе.",
							"pm.test('The Response has all properties',function()",
							"{",
							"let jsonData = pm.response.json();",
							"pm.expect(jsonData.Cur_Abbreviation).to.be.a('string');",
							"pm.expect(jsonData.Cur_ID).to.be.a('number');",
							"pm.expect(jsonData.Cur_Name).to.be.a('string');",
							"pm.expect(jsonData.Cur_OfficialRate).to.be.a('number');",
							"pm.expect(jsonData.Cur_Scale).to.be.a('number');",
							"pm.expect(jsonData.Date).to.be.a('string');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}